let baseUrl = "https://helix.autonom8.com/vodafone";
let pathUri = "/3g";
let iubUri = "/iubLinkStatus";

function doTask(params, state) {
  console.log("Called 3G Service");
  return new Promise((resolve, reject) => {
    let url = baseUrl + pathUri;
    let config = {
      "json": true,
      "method": 'GET'
    };
    axios(url, config).then(response => {
      console.log("Got 3G Response", response.data);
      let iubUrl = baseUrl + iubUri;
      let iubconfig = {
        "json": true,
        "method": 'GET'
      };
      axios(iubUrl, iubconfig).then(iubResponse => {
        console.log("Got IUB response:",iubResponse.data);
        resolve({
          "threeGData": response.data,
          "iubData": iubResponse.data
        });
      }).catch(error => {
        console.log(error);
        console.log("error in IUB response");
        resolve({
          "error": true
        });
      });
    }).catch(error => {
      console.log(error);
      console.log("error in 3G response");
      resolve({
        "error": true
      });
    });
  });
}


function doTask(params,state) {
  return new Promise((resolve, reject) => {
    let siteNumber = state.context.siteId;
    console.log("3g Data in Service Handler:", params.threeGData + params.iubData);

    if (params.threeGData && params.iubData) {
      let iubTable = {
        "msgType": "datatable",
        "msg": {
          "text": "IUB Link",
          "subText": "",
          "header": [{
            "name": "MO"
          },
          {
            "name": "State"
          }
          ],
          "rows": []
        }
      };
      let sectorText = "";
      let iubText ="";
      let threeGData = params.threeGData;
      let iubData = params.iubData;
      let sectorCount = 0;
      let appendText = "";
      for (let iter = 0; iter < threeGData.result.length; iter++) {
        let splittedArray = threeGData.result[iter].MO.split(',');
        if (splittedArray.length === 2) {
          sectorCount++;
          console.log("Split array length is 2");
          let umNumber = threeGData.result[iter].MO.match(/UM(\d+)/gi)[0];
          let sectorNumber = umNumber.match(/(?!UM)(\d+)/gi)[0];
          let sectorStatus = "";
          if (threeGData.result[iter].State.toLowerCase() === "enable") {
            sectorStatus = "up";
          } else {
            sectorStatus = "down";
          }
          console.log("SectorNumber:", sectorNumber);
          console.log("SectorStatus:", sectorStatus);
          appendText = appendText.concat("\n # " + sectorNumber  + " is "+ sectorStatus);
        }
      }
      for (let iubIter = 0; iubIter < iubData.result.length; iubIter++) {
        let tempiubText = iubData.result[iubIter].MO.match(/Iub_(\w+)/g)[0];
        iubTable.msg.rows.push({
          "data": [
            tempiubText,
            iubData.result[iubIter].State.toLowerCase()
          ]
        });
        if (iubData.result[iubIter].State.toLowerCase() === "enable") {
            sectorStatus = "up";
          } else {
            sectorStatus = "down";
          }
        iubText = iubText.concat("#  " + tempiubText + " is " + sectorStatus + "\n");
      }
      sectorText = sectorText.concat("Site "+ siteNumber + " has "+ sectorCount + " sectors." + "\n" + appendText);
      console.log("SectorCount:",sectorCount);
      console.log("SectorText:",sectorText);
      resolve({
        sectorText: sectorText,
        iubTable: JSON.stringify(iubTable),
        iubText: iubText
      });
    } else if (params.error) {
      resolve({
        sectorText: null
      });
    }
  });
}